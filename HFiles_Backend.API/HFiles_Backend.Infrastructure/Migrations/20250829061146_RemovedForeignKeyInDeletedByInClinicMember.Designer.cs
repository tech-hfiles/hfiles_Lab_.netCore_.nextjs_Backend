// <auto-generated />
using System;
using HFiles_Backend.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HFilesBackend.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250829061146_RemovedForeignKeyInDeletedByInClinicMember")]
    partial class RemovedForeignKeyInDeletedByInClinicMember
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Clinics.ClinicAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("AppointmentTime")
                        .HasColumnType("time(6)");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Treatment")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("VisitorPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("VisitorUsername")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("AppointmentDate", "AppointmentTime")
                        .HasDatabaseName("idx_clinicappointments_date_time");

                    b.HasIndex("Status", "AppointmentDate")
                        .HasDatabaseName("idx_clinicappointments_status_date");

                    b.ToTable("clinicappointments", (string)null);
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Clinics.ClinicConsentForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("clinicconsentforms", (string)null);
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Clinics.ClinicMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<long>("EpochTime")
                        .HasColumnType("bigint");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PromotedBy")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PromotedBy");

                    b.HasIndex("ClinicId", "DeletedBy")
                        .HasDatabaseName("IX_ClinicMembers_ClinicId_DeletedBy");

                    b.HasIndex("Id", "ClinicId", "DeletedBy")
                        .HasDatabaseName("IX_ClinicMembers_Id_ClinicId_DeletedBy");

                    b.HasIndex("UserId", "ClinicId", "DeletedBy")
                        .HasDatabaseName("IX_ClinicMembers_UserId_ClinicId_DeletedBy");

                    b.HasIndex("UserId", "ClinicId", "DeletedBy", "Role")
                        .HasDatabaseName("IX_ClinicMembers_UserId_ClinicId_DeletedBy_Role");

                    b.ToTable("clinicmembers", (string)null);
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Clinics.ClinicOtpEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OtpCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_ClinicOtpEntry_Email");

                    b.HasIndex("Email", "CreatedAt")
                        .HasDatabaseName("IX_ClinicOtpEntry_Email_CreatedAt");

                    b.HasIndex("Email", "CreatedAt", "ExpiryTime")
                        .HasDatabaseName("IX_ClinicOtpEntry_Email_CreatedAt_ExpiryTime");

                    b.ToTable("clinicotpentries", (string)null);
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Clinics.ClinicPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("HFID")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("HFID")
                        .HasDatabaseName("IX_ClinicPatients_HFID");

                    b.ToTable("clinicpatients", (string)null);
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Clinics.ClinicPatientRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<int>("ClinicVisitId")
                        .HasColumnType("int");

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<bool>("SendToPatient")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("ClinicVisitId");

                    b.HasIndex("PatientId");

                    b.ToTable("clinicpatientrecords", (string)null);
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Clinics.ClinicPrescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<string>("Instructions")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("MedicationDosage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Timing")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("clinicprescriptions", (string)null);
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Clinics.ClinicSignup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ClinicName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ClinicReference")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAtEpoch")
                        .HasColumnType("bigint");

                    b.Property<int>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("HFID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProfilePhoto")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_ClinicSignup_Email");

                    b.HasIndex("HFID")
                        .IsUnique()
                        .HasDatabaseName("IX_ClinicSignup_HFID");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_ClinicSignup_Id");

                    b.HasIndex("PhoneNumber")
                        .HasDatabaseName("IX_ClinicSignup_PhoneNumber");

                    b.HasIndex("Pincode")
                        .HasDatabaseName("IX_ClinicSignup_Pincode");

                    b.HasIndex("ClinicReference", "DeletedBy")
                        .HasDatabaseName("IX_ClinicSignup_ClinicReference_DeletedBy");

                    b.HasIndex("Id", "ClinicReference")
                        .HasDatabaseName("IX_ClinicSignup_Id_Reference");

                    b.HasIndex("Id", "Email", "DeletedBy")
                        .HasDatabaseName("IX_ClinicSignup_Id_Email_DeletedBy");

                    b.ToTable("clinicsignups", (string)null);
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Clinics.ClinicSuperAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<long>("EpochTime")
                        .HasColumnType("bigint");

                    b.Property<int>("IsMain")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId", "IsMain")
                        .HasDatabaseName("IX_ClinicSuperAdmins_ClinicId_IsMain");

                    b.HasIndex("Id", "UserId")
                        .HasDatabaseName("IX_ClinicSuperAdmins_Id_UserId");

                    b.HasIndex("UserId", "ClinicId", "IsMain")
                        .HasDatabaseName("IX_ClinicSuperAdmins_UserId_ClinicId_IsMain");

                    b.ToTable("clinicsuperadmins", (string)null);
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Clinics.ClinicTreatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("QuantityPerDay")
                        .HasColumnType("int");

                    b.Property<int?>("Sessions")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("TreatmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("clinictreatments", (string)null);
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Clinics.ClinicVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("AppointmentTime")
                        .HasColumnType("time(6)");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<int>("ClinicPatientId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentDate")
                        .HasDatabaseName("IX_ClinicVisits_AppointmentDate");

                    b.HasIndex("ClinicId");

                    b.HasIndex("ClinicPatientId")
                        .HasDatabaseName("IX_ClinicVisits_ClinicPatientId");

                    b.HasIndex("AppointmentDate", "ClinicPatientId")
                        .HasDatabaseName("IX_ClinicVisits_Date_Patient");

                    b.ToTable("clinicvisits", (string)null);
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Clinics.ClinicVisitConsentForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClinicVisitId")
                        .HasColumnType("int");

                    b.Property<int>("ConsentFormId")
                        .HasColumnType("int");

                    b.Property<string>("ConsentFormUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicVisitId")
                        .HasDatabaseName("IX_ClinicVisitConsentForm_ClinicVisitId");

                    b.HasIndex("ConsentFormId")
                        .HasDatabaseName("IX_ClinicVisitConsentForm_ConsentFormId");

                    b.ToTable("clinicvisitconsentforms", (string)null);
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Labs.LabAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("longtext");

                    b.Property<string>("Details")
                        .HasColumnType("longtext");

                    b.Property<string>("EntityName")
                        .HasColumnType("longtext");

                    b.Property<string>("HttpMethod")
                        .HasColumnType("longtext");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext");

                    b.Property<int?>("LabId")
                        .HasColumnType("int");

                    b.Property<string>("Notifications")
                        .HasColumnType("longtext");

                    b.Property<string>("SessionId")
                        .HasColumnType("longtext");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserRole")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("labauditlogs", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Labs.LabErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .HasColumnType("longtext");

                    b.Property<string>("Category")
                        .HasColumnType("longtext");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .HasColumnType("longtext");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("HttpMethod")
                        .HasColumnType("longtext");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext");

                    b.Property<int?>("LabId")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasColumnType("longtext");

                    b.Property<string>("StackTrace")
                        .HasColumnType("longtext");

                    b.Property<long?>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserRole")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("laberrorlogs", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Labs.LabMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<long>("EpochTime")
                        .HasColumnType("bigint");

                    b.Property<int>("LabId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<int>("PromotedBy")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LabId", "DeletedBy")
                        .HasDatabaseName("IX_LabMembers_LabId_DeletedBy");

                    b.HasIndex("Id", "LabId", "DeletedBy")
                        .HasDatabaseName("IX_LabMembers_Id_LabId_DeletedBy");

                    b.HasIndex("UserId", "LabId", "DeletedBy")
                        .HasDatabaseName("IX_LabMembers_UserId_LabId_DeletedBy");

                    b.HasIndex("UserId", "LabId", "DeletedBy", "Role")
                        .HasDatabaseName("IX_LabMembers_UserId_LabId_DeletedBy_Role");

                    b.ToTable("labmembers", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Labs.LabOtpEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OtpCode")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_LabOtpEntry_Email");

                    b.HasIndex("Email", "CreatedAt")
                        .HasDatabaseName("IX_LabOtpEntries_Email_CreatedAt");

                    b.HasIndex("Email", "CreatedAt", "ExpiryTime")
                        .HasDatabaseName("IX_LabOtpEntries_Email_CreatedAt_ExpiryTime");

                    b.ToTable("labotpentries", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Labs.LabResendReports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LabUserReportId")
                        .HasColumnType("int");

                    b.Property<long>("ResendEpochTime")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("labresendreports", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Labs.LabSignup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<long>("CreatedAtEpoch")
                        .HasColumnType("bigint");

                    b.Property<int>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("HFID")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LabName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("LabReference")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_LabSignup_Email");

                    b.HasIndex("HFID")
                        .IsUnique();

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_LabSignup_Id");

                    b.HasIndex("PhoneNumber")
                        .HasDatabaseName("IX_LabSignups_PhoneNumber");

                    b.HasIndex("Pincode")
                        .HasDatabaseName("IX_LabSignups_Pincode");

                    b.HasIndex("Id", "LabReference")
                        .HasDatabaseName("IX_LabSignups_Id_Reference");

                    b.HasIndex("LabReference", "DeletedBy")
                        .HasDatabaseName("IX_LabSignups_LabReference_DeletedBy");

                    b.HasIndex("Id", "Email", "DeletedBy")
                        .HasDatabaseName("IX_LabSignups_Id_Email_DeletedBy");

                    b.ToTable("labsignups", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Labs.LabSuperAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long>("EpochTime")
                        .HasColumnType("bigint");

                    b.Property<int>("IsMain")
                        .HasColumnType("int");

                    b.Property<int>("LabId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id", "UserId")
                        .HasDatabaseName("IX_LabSuperAdmins_Id_UserId");

                    b.HasIndex("LabId", "IsMain")
                        .HasDatabaseName("IX_LabSuperAdmins_LabId_IsMain");

                    b.HasIndex("UserId", "LabId", "IsMain")
                        .HasDatabaseName("IX_LabSuperAdmins_UserId_LabId_IsMain");

                    b.ToTable("labsuperadmins", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Labs.LabUserReports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<long>("EpochTime")
                        .HasColumnType("bigint");

                    b.Property<int>("LabId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("Resend")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("labuserreports", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BloodGroup")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CountryCallingCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<long>("CreatedEpoch")
                        .HasColumnType("bigint");

                    b.Property<string>("DOB")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmergencyContactCountryCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("EmergencyContactPhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("HeightFeet")
                        .HasColumnType("int");

                    b.Property<int?>("HeightInches")
                        .HasColumnType("int");

                    b.Property<string>("HfId")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("InvitedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPhoneVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Pincode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ProfilePhoto")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Relation")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserReference")
                        .HasColumnType("int");

                    b.Property<float?>("WeightKg")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("users", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Users.UserDynamicAllergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AllergyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsAllergic")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("userdynamicallergies", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Users.UserDynamicDiseaseRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DiseaseTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("FatherSide")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("MotherSide")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Myself")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("userdynamicdiseaserecords", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Users.UserDynamicDiseaseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DiseaseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("userdynamicdiseasetypes", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Users.UserMedicationAllergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("StaticAllergyId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StaticAllergyId");

                    b.HasIndex("UserId");

                    b.ToTable("usermedicationallergies", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Users.UserReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<long>("EpochTime")
                        .HasColumnType("bigint");

                    b.Property<decimal>("FileSize")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("LabId")
                        .HasColumnType("int");

                    b.Property<int?>("LabUserReportId")
                        .HasColumnType("int");

                    b.Property<int>("ReportCategory")
                        .HasColumnType("int");

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ReportUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UploadedBy")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("userreports", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Users.UserSocialHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AlcoholFrequency")
                        .HasColumnType("int");

                    b.Property<int?>("CaffeineFrequency")
                        .HasColumnType("int");

                    b.Property<int?>("ExerciseFrequency")
                        .HasColumnType("int");

                    b.Property<int?>("SmokingFrequency")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("usersocialhistories", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Users.UserStaticAllergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AllergyType")
                        .HasColumnType("int");

                    b.Property<bool>("IsAllergic")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("userstaticallergies", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Users.UserStaticDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DiseaseType")
                        .HasColumnType("int");

                    b.Property<bool>("FatherSide")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("MotherSide")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Myself")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("userstaticdiseases", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Users.UserSurgeryDetails", b =>
                {
                    b.Property<int>("user_surgery_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("drname")
                        .HasColumnType("longtext");

                    b.Property<string>("hostname")
                        .HasColumnType("longtext");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.Property<string>("user_surgery_details")
                        .HasColumnType("longtext");

                    b.Property<string>("user_surgery_year")
                        .HasColumnType("longtext");

                    b.HasKey("user_surgery_id");

                    b.ToTable("user_surgery_details", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Clinics.ClinicAppointment", b =>
                {
                    b.HasOne("HFiles_Backend.Domain.Entities.Clinics.ClinicSignup", "Clinics")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinics");
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Clinics.ClinicMember", b =>
                {
                    b.HasOne("HFiles_Backend.Domain.Entities.Clinics.ClinicSignup", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HFiles_Backend.Domain.Entities.Users.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HFiles_Backend.Domain.Entities.Users.User", "PromotedByUser")
                        .WithMany()
                        .HasForeignKey("PromotedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HFiles_Backend.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("CreatedByUser");

                    b.Navigation("PromotedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Clinics.ClinicPatientRecord", b =>
                {
                    b.HasOne("HFiles_Backend.Domain.Entities.Clinics.ClinicSignup", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HFiles_Backend.Domain.Entities.Clinics.ClinicVisit", "Visit")
                        .WithMany()
                        .HasForeignKey("ClinicVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HFiles_Backend.Domain.Entities.Clinics.ClinicPatient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Patient");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Clinics.ClinicPrescription", b =>
                {
                    b.HasOne("HFiles_Backend.Domain.Entities.Clinics.ClinicSignup", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Clinics.ClinicSuperAdmin", b =>
                {
                    b.HasOne("HFiles_Backend.Domain.Entities.Clinics.ClinicSignup", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HFiles_Backend.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Clinics.ClinicTreatment", b =>
                {
                    b.HasOne("HFiles_Backend.Domain.Entities.Clinics.ClinicSignup", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Clinics.ClinicVisit", b =>
                {
                    b.HasOne("HFiles_Backend.Domain.Entities.Clinics.ClinicSignup", "Clinic")
                        .WithMany("Visits")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HFiles_Backend.Domain.Entities.Clinics.ClinicPatient", "Patient")
                        .WithMany("Visits")
                        .HasForeignKey("ClinicPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Clinics.ClinicVisitConsentForm", b =>
                {
                    b.HasOne("HFiles_Backend.Domain.Entities.Clinics.ClinicVisit", "Visit")
                        .WithMany("ConsentFormsSent")
                        .HasForeignKey("ClinicVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HFiles_Backend.Domain.Entities.Clinics.ClinicConsentForm", "ConsentForm")
                        .WithMany()
                        .HasForeignKey("ConsentFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsentForm");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Users.UserDynamicAllergy", b =>
                {
                    b.HasOne("HFiles_Backend.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Users.UserDynamicDiseaseRecord", b =>
                {
                    b.HasOne("HFiles_Backend.Domain.Entities.Users.UserDynamicDiseaseType", "DiseaseType")
                        .WithMany()
                        .HasForeignKey("DiseaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HFiles_Backend.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiseaseType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Users.UserMedicationAllergy", b =>
                {
                    b.HasOne("HFiles_Backend.Domain.Entities.Users.UserStaticAllergy", "UserStaticAllergy")
                        .WithMany("MedicationAllergies")
                        .HasForeignKey("StaticAllergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HFiles_Backend.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserStaticAllergy");
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Users.UserSocialHistory", b =>
                {
                    b.HasOne("HFiles_Backend.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Users.UserStaticAllergy", b =>
                {
                    b.HasOne("HFiles_Backend.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Users.UserStaticDisease", b =>
                {
                    b.HasOne("HFiles_Backend.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Clinics.ClinicPatient", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Clinics.ClinicSignup", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Clinics.ClinicVisit", b =>
                {
                    b.Navigation("ConsentFormsSent");
                });

            modelBuilder.Entity("HFiles_Backend.Domain.Entities.Users.UserStaticAllergy", b =>
                {
                    b.Navigation("MedicationAllergies");
                });
#pragma warning restore 612, 618
        }
    }
}
